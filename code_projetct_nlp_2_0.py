# -*- coding: utf-8 -*-
"""Code projetct NLP 2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qOWdNkfVQmavToVZYbv8FFu0R9Piwkuz
"""

!pip install openai==0.28

import openai
import requests
from bs4 import BeautifulSoup
from random import choice

# Set your OpenAI API key
api_key = 'YourApiKey'
openai.api_key = api_key

# Updated User-Agents for Brave on Windows and macOS
user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Brave/98.1.4758.102',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Brave/98.1.4758.102',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0 Brave/98.1.4758.102',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 Brave/98.1.4758.102'
]

session = requests.Session()  # Use a session object

def get_lyrics(song_url):
    headers = {
        'User-Agent': choice(user_agents),
        'Referer': 'https://www.google.com/'  # Pretend the request is coming from Google
    }
    try:
        response = session.get(song_url, headers=headers)  # Use the session to send the request
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        lyrics_elements = soup.find_all('div', text=True)
        lyrics_text = '\n'.join([elem.get_text(separator='\n') for elem in lyrics_elements if elem.get_text(strip=True)])
        if not lyrics_text:
            return "Lyrics not found. Check the page structure or try another URL."
        return lyrics_text
    except requests.RequestException as e:
        return f"Failed to retrieve lyrics: {e}"

def chat_with_openai():
    print("Bonjour. N'hésitez pas à me poser des questions. Tapez 'exit' pour quitter!")

    conversation_history = [
        {"role": "system", "content": "You are speaking with an assistant specialized in analyzing music lyrics. How can I help you today?"}
    ]

    while True:
        song_url = input("Enter the URL of the song you want to analyze: (type 'exit' to quit)\n")
        if song_url.lower() == "exit":
            print("Fin de la conversation. Au revoir!")
            break

        lyrics = get_lyrics(song_url)
        if "Failed" in lyrics or "not found" in lyrics:
            print(lyrics)
            continue

        numbered_lyrics = '\n'.join(f"{idx+1}: {line}" for idx, line in enumerate(lyrics.split('\n')))
        print(numbered_lyrics)

        try:
            line_choice = int(input("Which line number do you want to analyze? Please enter the number:\n")) - 1
            line = lyrics.split('\n')[line_choice]

            user_input = f"Can you explain what the author of the song wanted to say in this line: '{line}'?"
            conversation_history.append({"role": "user", "content": user_input})

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=conversation_history
            )
            conversation_history.append({"role": "assistant", "content": response.choices[0].message['content']})
            print(response.choices[0].message['content'])
        except Exception as e:
            print(f"An error occurred: {e}")

chat_with_openai()

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
import time

def get_lyrics_with_selenium(song_url):
    # Setup Chrome options
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Run in headless mode
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920x1080")
    chrome_options.add_argument("start-maximized")
    chrome_options.add_argument("enable-automation")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-browser-side-navigation")
    chrome_options.add_argument("--disable-extensions")

    # Setup driver
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

    try:
        driver.get(song_url)
        time.sleep(5)  # Wait for the page to load
        lyrics = driver.find_element_by_xpath('//div[contains(@class, "lyrics")]').text
        return lyrics
    except Exception as e:
        return f"Failed to retrieve lyrics: {e}"
    finally:
        driver.quit()

# Example Usage
lyrics_url = 'https://genius.com/Werenoi-escorte-lyrics'
lyrics = get_lyrics_with_selenium(lyrics_url)
print(lyrics)